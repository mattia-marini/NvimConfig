global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

def rows():
	return vim.eval("vimtex#env#is_inside('tabular')") or vim.eval("vimtex#env#is_inside('bmatrix')")
endglobal

###############################
#  Snippets by Mattia Marini  #
###############################
context "math()"
snippet MC "\mathcal" A
\mathcal{$1}
endsnippet

snippet EQ "equation"
\begin{equation} \label{eq:$1}
$0
\end{equation}
endsnippet

snippet LL "label" A
\label{$1}
endsnippet

context "math()"
snippet '\b(det|dim)' "" rA
\\`!p snip.rv=match.group(1)` 
endsnippet

context "math()"
snippet BB "" A
\mathbb{$1}
endsnippet

snippet '(s|eq|sub|ssub|teo|def|formula)(ref)' "\ref{}" rA
\textit{`!p tipo = {"s": "sezione", "eq": "equazione", "sub": "sottosezione", "ssub": "sottosottosezione", "teo": "teorema ", "def": "definizione", "formula": "formula"}
snip.rv = tipo[match.group(1)]` \ref{$1}}
endsnippet

context "math()"
snippet int "integral" wA
\int_{${1:a}}^{${2:b}} ${3:${VISUAL}} \; dx$0
endsnippet

snippet fig "includegraphics"
\begin{center}
	\includegraphics{Images/$1}
\end{center}
endsnippet

context "math()"
snippet maggiore ">" A
>
endsnippet

context "math()"
snippet minore "<" A
<
endsnippet

#------------------------------------------------------------------------------
snippet comm "Comment" A
`!p 
a = snip.v.text
ans = "%"

for x in a:
    if x == '\n':
        ans+="\n%"
    else:
        ans+=x

snip.rv=ans[:-1]
`
endsnippet


snippet uncomm "Uncomment" A
`!p 
a = snip.v.text
ans=""
x=0
if a[0]=='%':
    x=1
else:
    x=0

while x<len(a):
    if a[x] == '\n':
        if x<len(a)-1 and a[x+1]=='%':
            ans+='\n'
            x+=1
        else:
            ans+='\n'
    else:
        ans+=a[x]
    x+=1
snip.rv=ans
`
endsnippet

context "math()"
snippet bin "binomiale" 
\binom{$1}{$2}
endsnippet

snippet def "\definizione" b
\definizione{$1}{
$0
}
endsnippet

snippet formula "\formula" b
\formula{$1}{
$0
}
endsnippet

snippet teo "\teorema" b
\teorema{$1}{
$0
}
endsnippet

snippet assioma "\teorema" b
\assioma{$1}{
$0
}
endsnippet

snippet ref "\ref{}"
\ref{$1}
endsnippet

context "math()" 
snippet MR "" 
M_{m,n} (\R)
endsnippet

context "math()" 
snippet GE "" iA
\ge
endsnippet

context "math()" 
snippet LE "" iA
\le
endsnippet

context "math()" 
snippet NN "" Ai
\N
endsnippet

context "math()" 
snippet RR "real" iA
\R
endsnippet

context "math()" 
snippet CC "" Ai
\C
endsnippet

context "math()" 
snippet QQ "Q" iA
\Q
endsnippet

context "math()" 
snippet ZZ "Z" iA
\Z
endsnippet

context "math()" 
snippet neq "\neq" A
\neq
endsnippet

context "math()" 
snippet 'vv([a-zA-Z]+)' "vettore" rA
\vec{`!p snip.rv=match.group(1)`} 
endsnippet

snippet inc ""
\incomprensione{`date +"%T"`}
endsnippet

context "math()"
snippet tc "t.c." i
\text{ t.c. }
endsnippet

snippet [] "" iA
[${1:${VISUAL}}] 
endsnippet

snippet () "" Ai
(${1:${VISUAL}})
endsnippet

snippet "" "virgolette" Ai
"${1:${VISUAL}}"
endsnippet

snippet time "" 
`date +"%T"`
endsnippet

context "math()"
snippet vv "\vec{}" i
\vec{${1:${VISUAL}}}
endsnippet

snippet bbox ""
\bigbox{
$1
}
endsnippet

snippet vs ""
\vskip3mm
endsnippet

snippet comm "" 
\command{$1}{$2}{$3}
endsnippet

snippet {} "Pair brackets" iA
{${1:${VISUAL}}}
endsnippet

context "math()"
snippet ub "underbrace" iA
\underbrace{${VISUAL}$1}_{\text{$2}}
endsnippet

snippet cha "capitolo senza label" b
\chapter{$1}
endsnippet
snippet Cha "capitolo" b
\chapter{$1}
\label{cha:${2:`!p
ans=""
for x in t[1]:
    if x!=" ":ans += x

snip.rv = ans.casefold()`}}

endsnippet

snippet sec "capitolo senza label" b
\section{$1}
endsnippet
snippet Sec "sezione" b
\section{$1}
\label{sec:${2:`!p
ans=""
for x in t[1]:
    if x!=" ":ans += x

snip.rv = ans.casefold()`}}

endsnippet

snippet sub "capitolo senza label" b
\subsection{$1}
endsnippet
snippet Sub "subsection" b
\subsection{$1}
\label{sub:${2:`!p
ans=""
for x in t[1]:
    if x!=" ":ans += x

snip.rv = ans.casefold()`}}

endsnippet

snippet ssub "capitolo senza label" b
\subsubsection*{$1}
endsnippet

snippet Ssub "subsubsection" b
\subsubsection{$1}
\label{ssub:${2:`!p
ans=""
for x in t[1]:
    if x!=" ":ans += x

snip.rv = ans.casefold()`}}

endsnippet

snippet date "Insert current date"
\textit{`date +%d.%m.%y`}
endsnippet

context "env("enumerate") or env("itemize")"
snippet i "item" b
\item $1
i$0
endsnippet

snippet doc_start "Template solito" b
\documentclass[12pt,a4paper,oneside]{amsbook}
\input{../Preamble.tex}

\title{${1:Titolo}}
\author{Mattia Marini}
\date{`date +%d.%m.%y`}

\begin{document}

\maketitle
\tableofcontents

${0}
\end{document}
endsnippet


context "env("forest")"
snippet j "new node" i

	[$1]$0

endsnippet

priority 1000
context "env("forest")"
snippet ]j "new node" i
]
[$1]$0
endsnippet

snippet '(\d+)tree' "albero con data inclinazione" rb
\begin{forest}
	[$1, for tree={forked edges, draw=gray!20, align=left, `!p
if int(match.group(1)) < 180:
	snip.rv ="grow'="
else: snip.rv ="grow="
snip.rv += match.group(1)`}$0]
\end{forest}
endsnippet

snippet nm "name=" i
, name=${1:1}
endsnippet

snippet '(\d+)dn' "node con label" r
\node[label=`!p snip.rv=match.group(1)`:$1] at ($2)$0
endsnippet


context "env("forest")"
snippet 'fit(.+),(.+)' "\node[fit=...]" rb
\node[dashed, draw=gray, fit=(`!p snip.rv=match.group(1)`)(`!p snip.rv=match.group(2)`), label=${1:left}:$2]{};$0
endsnippet

snippet pppp "" 
aasdf
endsnippet

snippet fullplot "Grafico intera larghezza" b
\begin{tikzpicture}
	\begin{axis}[title=GRAFICO: $1,
	xmin=${2:0}, xmax=${3:6},
	ymin=${4:0},ymax=${5:3},
	restrict y to domain = $4:$5, domain=$2:$3, width=0.98\textwidth, height=0.5\textwidth, grid=major, samples=200,  ylabel=$f(x)$, xlabel=$x$, legend entries={$ $}]
	\addplot[black, thick] {$6};$0
	\end{axis}
\end{tikzpicture}
endsnippet

snippet halfplot "Grafico intera larghezza" b
\begin{tikzpicture}
	\begin{axis}[
	xmin=${2:0}, xmax=${3:4},
	ymin=${4:0},ymax=${5:4},
	restrict y to domain = $4:$5, domain=$2:$3, width=0.5\textwidth, height=0.5\textwidth, grid=major, samples=200,  ylabel=$f(x)$, xlabel=$x$, legend entries={$ $}]
	\addplot[black, thick] {$6};$0
	\end{axis}
\end{tikzpicture}
endsnippet

snippet axis "" b
\begin{tikzpicture}
	\begin{axis}[	xmin=${2:0}, xmax=${3:4}, ymin=${4:0},ymax=${5:4},
			width=0.5\textwidth, height=0.5\textwidth, grid=major]

	\end{axis}
\end{tikzpicture}
endsnippet
context "env("axis")"
snippet addp "\addplot" b
\addplot[black, thick]{};
endsnippet

snippet '(\d+)(c|l|r)' "" r
`!p 
for x in range(int(match.group(1))-1):
	snip.rv+=match.group(2)+"|"
snip.rv+=match.group(2)
`
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	${VISUAL}$0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[h!]
	\centering
	\caption{${1:caption}}
	\label{tab:${2:label}}
	\begin{tabular}{${3:c}}
	$0
	\end{tabular}
\end{table}
endsnippet


context "rows()"
snippet !10 "aggiungi 10 colonne" b
$1 & $2 & $3 & $4 & $5 & $6 & $7 & $8 & $9 & $10 \\\\
!10$0
endsnippet
context "rows()"
snippet !9 "aggiungi 9 colonne" b
$1 & $2 & $3 & $4 & $5 & $6 & $7 & $8 & $9 \\\\
!9$0
endsnippet

context "env("tabular") or env("bmatrix")"
snippet !8 "aggiungi 8 colonne" b
$1 & $2 & $3 & $4 & $5 & $6 & $7 & $8 \\\\
!8$0
endsnippet

context "env("tabular") or env("bmatrix")"
snippet !7 "aggiungi 7 colonne" b
$1 & $2 & $3 & $4 & $5 & $6 & $7 \\\\
!7$0
endsnippet

context "env("tabular") or env("bmatrix")"
snippet !6 "aggiungi 6 colonne" b
$1 & $2 & $3 & $4 & $5 & $6 \\\\
!6$0
endsnippet

context "env("tabular") or env("bmatrix")"
snippet !5 "aggiungi 5 colonne" b
$1 & $2 & $3 & $4 & $5 \\\\
!5$0
endsnippet

context "env("tabular") or env("bmatrix")"
snippet !4 "aggiungi 4 colonne" b
$1 & $2 & $3 & $4 \\\\
!4$0
endsnippet

context "env("tabular") or env("bmatrix")"
snippet !3 "aggiungi 3 colonne" b
$1 & $2 & $3 \\\\
!3$0
endsnippet

context "env("tabular") or env("bmatrix")"
snippet !2 "aggiungi 2 colonne" b
$1 & $2 \\\\
!2$0
endsnippet

context "env("tabular") or env("bmatrix")"
snippet hl "\hline" A
\hline
endsnippet

snippet cc "Center environment" bA
\begin{center}
	$1${VISUAL}
\end{center}
$0
endsnippet

snippet bisect "Dividi pagina in due" b
\begin{minipage}[t]{0.48\textwidth}
$1
\end{minipage}
%
\begin{minipage}[t]{0.48\textwidth}
$2
\end{minipage}
endsnippet

snippet tb "\textbox" bA
\textbox{$1}$0
endsnippet

context "math()"
snippet qu "\quad" A
\quad 
endsnippet

snippet qu "\quad"
\quad 
endsnippet

snippet f "\f" b
\[
	\boxed{$1}
\]
endsnippet

snippet bbf "\textbf" wA
\textbf{$1${VISUAL}}$0
endsnippet

snippet iit "\textbf" wA
\textit{$1${VISUAL}}$0
endsnippet

snippet uul "\textbf" wA
\underline{$1${VISUAL}}$0
endsnippet

snippet hr "\hr, linea orizzontale" bA
\hr
$0
endsnippet

context "math()"
snippet abs "Valore assoluto" iA
\left|$1\right|$0
endsnippet

snippet code "Listing codice c++" b
\begin{code}{$1}{${2:`!p
ans=""
for x in t[1]:
    if x!=" ":ans += x

snip.rv = ans.casefold()`}}
$3
\end{code}
$0
endsnippet

context "math()"
snippet neq ""
\neq
endsnippet


####################################
#  Fine snippets by Mattia Marini  #
####################################


snippet enum "Enumerate" bA
\begin{enumerate}
	\item $1
	i$0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $1
	i$0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

#snippet im "Math" A
#$${1}$`!p
#if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
#	snip.rv = ' '
#else:
#	snip.rv = ''
#`$2
#endsnippet

snippet im "Inline math" A 
$ $1 $
endsnippet

snippet dm "Math" wA
\[
${VISUAL}$0
\] 
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{${1:${VISUAL}}}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= 
endsnippet

snippet != "equals" iA
\neq
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix}
$0
\end{pmatrix}
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix}
$0
\end{bmatrix}
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet


context "math()"
snippet {} "left{ right}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet


context "math()"
snippet [] "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet OH "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{k=${1:1}}^{${2:\infty}} ${3:a_k x^k}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:x} \to ${2:\infty}} ${3:f(x)} $0
endsnippet

snippet lim+ "Limite superiore" w
\lim_{${1:x} \to ${2:n}^+}  ${3:f(x)} $0
endsnippet

snippet lim- "Limite inferiore" w
\lim_{${1:x} \to ${2:n}^-}  ${3:f(x)} $0
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet


context "math()"
snippet inf "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le
endsnippet

snippet >= "geq" iA
\ge
endsnippet

context "math()"
snippet EE "geq" iA
\exists
endsnippet

context "math()"
snippet forall "forall" A
\forall
endsnippet

context "math()"
snippet '\b(a|b|c|x|y|z)(ii|kk|nn)' "subscript" rA
`!p snip.rv = match.group(1) + "_" + match.group(2)[0:1]`
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

context "env("tikzpicture")"
snippet vv "Tikz node" bA
\draw [-stealth] (0,0) to ($1);
endsnippet

context "env("tikzpicture")"
snippet nn "Tikz node" w
\node [$1] at ($2) {$3};
endsnippet

context "env("tikzpicture")"
snippet dpp "Tikz dot" bA
\node [label=north: $1 , fill=black, circle, inner sep = 1pt] at ($2) {};
endsnippet


context "env("tikzpicture")"
snippet draw "Tikz dot" 
\draw ($1) to ($2) ${3:to nc}$0
endsnippet

context "env("tikzpicture")"
snippet nc "Tikz dot" 
($1) to nc$0
endsnippet

context "env("tikzpicture")"
snippet pp "Tikz dot" bA
\node [fill=black, circle, inner sep = 1pt] at ($2) {};
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

priority 100
snippet ** "cdot" iA
\cdot
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rA
\\`!p snip.rv = match.group(1)` 
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:a}}^{${2:b}} ${3:${VISUAL}} \; dx$0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet


snippet ~~ "~" iA
\sim
endsnippet

context "math()"
snippet set "set" wA
\left\{$1\right\} $0
endsnippet

snippet || "mid" iA
\mid
endsnippet


context "math()"
snippet sset "subset" Ai
\subseteq 
endsnippet

context "math()"
snippet notin "not in " A
\not\in
endsnippet

context "math()"
snippet inn "in " A
\in 
endsnippet


context "math()"
snippet uu "cup" A
\cup 
endsnippet
 
context "math()"
snippet nn "cap" A
\cap
endsnippet

context "math()"
snippet OO "emptyset" iA
\emptyset
endsnippet


snippet <! "normal" iA
\triangleleft
endsnippet

snippet <> "hokje" iA
\diamond
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" A
\text{ $1${VISUAL} }$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet


priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "Forall" "" A
\forall ${1:n} \in ${2:\R}
endsnippet

context "math()"
snippet '\b(alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)' "" rA
\\`!p snip.rv=match.group(1)` 
endsnippet

context "math()"
snippet rarr "" A
\rightarrow
endsnippet
context "math()"
snippet larr "" A
\leftarrow
endsnippet
context "math()"
snippet Rarr "" A
\Rightarrow
endsnippet
context "math()"
snippet Larr "" A
\Leftarrow
endsnippet
context "math()"
snippet iif "" wA
\Leftrightarrow
endsnippet

context "math()"
snippet to "" A
\to
endsnippet

# vim:ft=snippets
